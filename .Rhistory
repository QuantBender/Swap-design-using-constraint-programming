rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(B.left, B.bot, B.right, B.top, col = "lightblue")
text(B.center[1], B.center[2], paste("Company ", Company_B, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with a label.
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(A.left, 0.2, A.right - 5, 0.2, rf_A, label_offset = 0.25, side = "above")
add_arrow(A.right - 5, -0.2, A.left, -0.2, paste(floating_rate, s_A, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, A.right, 0.2, rf_Bk_A, label_offset = 0.25, side = "above")
add_arrow(B.left, 0.2, Bank.right, 0.2, rf_B_Bk, label_offset = 0.25, side = "above")
add_arrow(A.right, -0.2, Bank.left, -0.2, paste(floating_rate, s_A_Bk, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, B.left, -0.2, paste(floating_rate, s_Bk_B, sep="+"), label_offset = 0.25, side = "below")
add_arrow(B.right + 2, 0.2, B.right, 0.2, rf_B, label_offset = 0.25, side = "above")
add_arrow(B.right, -0.2, B.right + 2, -0.2, paste(floating_rate, s_B, sep="+"), label_offset = 0.25, side = "below")
}
# read solutions
solutions <- read.csv("solutions.csv")
# Define fixed parameters
rf_A <- "5%"
rf_B <- "6.4%"
s_A <- "-0.1%"
s_B <- "0.6%"
G_B <- "0.4%"
G_A <- "0.4%"
G_bank <- "0.1%"
Company_A <- "A"
Company_B <- "B"
Bank <- "Bank"
floating_rate <- "SOFR"
# Loop through each row and plot the diagram
for (i in nrow(solutions)-5:nrow(solutions)) {
rf_B_Bk <- solutions$r_f_B_Bk[i]
s_Bk_B <- solutions$s_Bk_B[i]
rf_Bk_A <- solutions$r_f_Bk_A[i]
s_A_Bk <- solutions$s_A_Bk[i]
# Plot diagram with values from current row
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate)
}
# read solutions
solutions <- read.csv("solutions.csv")
# Define fixed parameters
rf_A <- "5%"
rf_B <- "6.4%"
s_A <- "-0.1%"
s_B <- "0.6%"
G_B <- "0.4%"
G_A <- "0.4%"
G_bank <- "0.1%"
Company_A <- "A"
Company_B <- "B"
Bank <- "Bank"
floating_rate <- "SOFR"
# Loop through each row and plot the diagram
for (i in 1:5) {
rf_B_Bk <- solutions$r_f_B_Bk[i]
s_Bk_B <- solutions$s_Bk_B[i]
rf_Bk_A <- solutions$r_f_Bk_A[i]
s_A_Bk <- solutions$s_A_Bk[i]
# Plot diagram with values from current row
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate)
}
# read solutions
solutions <- read.csv("solutions.csv")
# Define fixed parameters
rf_A <- "5%"
rf_B <- "6.4%"
s_A <- "-0.1%"
s_B <- "0.6%"
G_B <- "0.4%"
G_A <- "0.4%"
G_bank <- "0.1%"
Company_A <- "A"
Company_B <- "B"
Bank <- "Bank"
floating_rate <- "SOFR"
# Loop through each row and plot the diagram
for (i in nrow(solutions)-5:nrow(solutions)) {
rf_B_Bk <- solutions$r_f_B_Bk[i]
s_Bk_B <- solutions$s_Bk_B[i]
rf_Bk_A <- solutions$r_f_Bk_A[i]
s_A_Bk <- solutions$s_A_Bk[i]
# Plot diagram with values from current row
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate)
}
reticulate::repl_python()
reticulate::repl_python()
plotDiagram <- function(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate) {
# Set up an empty plot with vertical limits exactly covering the diagram.
plot(NA, NA,
xlim = c(-4, 14), ylim = c(0, 0),
type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
# Define node positions and dimensions.
# Company A: centered at (0, 0)
A.center <- c(0, 0)
A.left <- -1; A.right <- 1; A.top <- 0.5; A.bot <- -0.5
# Bank: shifted further to the right
Bank.center <- c(4.5, 0)
Bank.left <- 3.5; Bank.right <- 5.5; Bank.top <- 0.5; Bank.bot <- -0.5
# Company B: shifted further to the right
B.center <- c(9, 0)
B.left <- 8; B.right <- 10; B.top <- 0.5; B.bot <- -0.5
# Draw nodes as rectangles with text inside.
rect(A.left, A.bot, A.right, A.top, col = "lightblue")
text(A.center[1], A.center[2], paste("Company ", Company_A, "\n", G_A, sep = ""), cex = 0.6)
rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(B.left, B.bot, B.right, B.top, col = "lightblue")
text(B.center[1], B.center[2], paste("Company ", Company_B, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with a label.
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(A.left, 0.2, A.right - 5, 0.2, rf_A, label_offset = 0.25, side = "above")
add_arrow(A.right - 5, -0.2, A.left, -0.2, paste(floating_rate, s_A, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, A.right, 0.2, rf_Bk_A, label_offset = 0.25, side = "above")
add_arrow(B.left, 0.2, Bank.right, 0.2, rf_B_Bk, label_offset = 0.25, side = "above")
add_arrow(A.right, -0.2, Bank.left, -0.2, paste(floating_rate, s_A_Bk, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, B.left, -0.2, paste(floating_rate, s_Bk_B, sep="+"), label_offset = 0.25, side = "below")
add_arrow(B.right + 2, 0.2, B.right, 0.2, rf_B, label_offset = 0.25, side = "above")
add_arrow(B.right, -0.2, B.right + 2, -0.2, paste(floating_rate, s_B, sep="+"), label_offset = 0.25, side = "below")
}
# read solutions
solutions <- read.csv("solutions.csv")
# Define fixed parameters
rf_A <- "5%"
rf_B <- "6.4%"
s_A <- "-0.1%"
s_B <- "0.6%"
G_B <- "0.4%"
G_A <- "0.4%"
G_bank <- "0.1%"
Company_A <- "A"
Company_B <- "B"
Bank <- "Bank"
floating_rate <- "SOFR"
# Loop through each row and plot the diagram
for (i in 1:5) {
rf_B_Bk <- solutions$r_f_B_Bk[i]
s_Bk_B <- solutions$s_Bk_B[i]
rf_Bk_A <- solutions$r_f_Bk_A[i]
s_A_Bk <- solutions$s_A_Bk[i]
# Plot diagram with values from current row
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate)
}
reticulate::repl_python()
solutions <- read.csv("solutions.csv")
rf_X <- "8%"
rf_Y <- "8.8%"
s_X <- "+0%"
s_Y <- "+0%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.2%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
floating_rate <- "LIBOR"
for (i in 1:5) {
rf_Y_Bk <- solutions$r_f_B_Bk[i]
s_Bk_Y <- solutions$s_Bk_B[i]
rf_Bk_X <- solutions$r_f_Bk_A[i]
s_X_Bk <- solutions$s_A_Bk[i]
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_X, rf_Y, s_X, s_Y, G_X, G_Y, G_bank, s_X_Bk, s_Bk_Y, rf_Y_Bk, rf_Bk_X, Company_X, Company_Y, Bank, floating_rate)
}
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
plotDiagram <- function(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate) {
# Set up an empty plot with vertical limits exactly covering the diagram.
plot(NA, NA,
xlim = c(-4, 14), ylim = c(0, 0),
type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
# Define node positions and dimensions.
# Company A: centered at (0, 0)
A.center <- c(0, 0)
A.left <- -1; A.right <- 1; A.top <- 0.5; A.bot <- -0.5
# Bank: shifted further to the right
Bank.center <- c(4.5, 0)
Bank.left <- 3.5; Bank.right <- 5.5; Bank.top <- 0.5; Bank.bot <- -0.5
# Company B: shifted further to the right
B.center <- c(9, 0)
B.left <- 8; B.right <- 10; B.top <- 0.5; B.bot <- -0.5
# Draw nodes as rectangles with text inside.
rect(A.left, A.bot, A.right, A.top, col = "lightblue")
text(A.center[1], A.center[2], paste("Company ", Company_A, "\n", G_A, sep = ""), cex = 0.6)
rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(B.left, B.bot, B.right, B.top, col = "lightblue")
text(B.center[1], B.center[2], paste("Company ", Company_B, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with a label.
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(A.left, 0.2, A.right - 5, 0.2, rf_A, label_offset = 0.25, side = "above")
add_arrow(A.right - 5, -0.2, A.left, -0.2, paste(floating_rate, s_A, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, A.right, 0.2, rf_Bk_A, label_offset = 0.25, side = "above")
add_arrow(B.left, 0.2, Bank.right, 0.2, rf_B_Bk, label_offset = 0.25, side = "above")
add_arrow(A.right, -0.2, Bank.left, -0.2, paste(floating_rate, s_A_Bk, sep="+"), label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, B.left, -0.2, paste(floating_rate, s_Bk_B, sep="+"), label_offset = 0.25, side = "below")
add_arrow(B.right + 2, 0.2, B.right, 0.2, rf_B, label_offset = 0.25, side = "above")
add_arrow(B.right, -0.2, B.right + 2, -0.2, paste(floating_rate, s_B, sep="+"), label_offset = 0.25, side = "below")
}
# read solutions
solutions <- read.csv("solutions.csv")
# Define fixed parameters
rf_A <- "5%"
rf_B <- "6.4%"
s_A <- "-0.1%"
s_B <- "0.6%"
G_B <- "0.4%"
G_A <- "0.4%"
G_bank <- "0.1%"
Company_A <- "A"
Company_B <- "B"
Bank <- "Bank"
floating_rate <- "SOFR"
# Loop through each row and plot the diagram
for (i in 1:5) {
rf_B_Bk <- solutions$r_f_B_Bk[i]
s_Bk_B <- solutions$s_Bk_B[i]
rf_Bk_A <- solutions$r_f_Bk_A[i]
s_A_Bk <- solutions$s_A_Bk[i]
# Plot diagram with values from current row
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_A, rf_B, s_A, s_B, G_B, G_A, G_bank, s_A_Bk, s_Bk_B, rf_B_Bk, rf_Bk_A, Company_A, Company_B, Bank, floating_rate)
}
reticulate::repl_python()
solutions <- read.csv("solutions.csv")
rf_X <- "8%"
rf_Y <- "8.8%"
s_X <- "+0%"
s_Y <- "+0%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.2%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
floating_rate <- "LIBOR"
for (i in 1:5) {
rf_Y_Bk <- solutions$r_f_B_Bk[i]
s_Bk_Y <- solutions$s_Bk_B[i]
rf_Bk_X <- solutions$r_f_Bk_A[i]
s_X_Bk <- solutions$s_A_Bk[i]
par(mar = c(0, 0, 0, 0))
plotDiagram(rf_X, rf_Y, s_X, s_Y, G_X, G_Y, G_bank, s_X_Bk, s_Bk_Y, rf_Y_Bk, rf_Bk_X, Company_X, Company_Y, Bank, floating_rate)
}
reticulate::repl_python()
plotDiagram <- function(rfDollar_A, rfDollar_B, rfYen_A, rfYen_B, G_B, G_A, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank) {
# Set up an empty plot with vertical limits exactly covering the diagram.
plot(NA, NA,
xlim = c(-4, 14), ylim = c(0, 0),
type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
# Define node positions and dimensions.
# Company X: centered at (0, 0)
X.center <- c(0, 0)
X.left <- -1; X.right <- 1; X.top <- 0.5; X.bot <- -0.5
# Bank: shifted further to the right
Bank.center <- c(4.5, 0)
Bank.left <- 3.5; Bank.right <- 5.5; Bank.top <- 0.5; Bank.bot <- -0.5
# Company Y: shifted further to the right
Y.center <- c(9, 0)
Y.left <- 8; Y.right <- 10; Y.top <- 0.5; Y.bot <- -0.5
# Draw nodes as rectangles with text inside.
rect(X.left, X.bot, X.right, X.top, col = "lightblue")
text(X.center[1], X.center[2], paste("Company ", Company_X, "\n", G_A, sep = ""), cex = 0.6)
rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(Y.left, Y.bot, Y.right, Y.top, col = "lightblue")
text(Y.center[1], Y.center[2], paste("Company ", Company_Y, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(X.left, 0.2, X.right - 5, 0.2, rfDollar_A, label_offset = 0.25, side = "above")
add_arrow(X.right - 5, -0.2, X.left, -0.2, rfYen_A, label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, X.right, 0.2, rf_Dollar_A_Bk, label_offset = 0.25, side = "above")
add_arrow(Y.left, 0.2, Bank.right, 0.2, rf_Dollar_Bk_B, label_offset = 0.25, side = "above")
add_arrow(X.right, -0.2, Bank.left, -0.2, rfYen_Bk_A, label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, Y.left, -0.2, rf_Yen_B_Bk, label_offset = 0.25, side = "below")
add_arrow(Y.right + 2, 0.2, Y.right, 0.2, rfDollar_B, label_offset = 0.25, side = "above")
add_arrow(Y.right, -0.2, Y.right + 2, -0.2, rfYen_B, label_offset = 0.25, side = "below")
}
solutions <- read.csv("solutions.csv")
rfDollar_X <- "9.6%"
rfDollar_Y <- "10%"
rfYen_X <- "5%"
rfYen_Y <- "6.5%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.5%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
for (i in 1:5) {
rfYen_Bk_A <- solutions$r_f_Yen_Bk_A[i]
rf_Dollar_Bk_B <- solutions$r_f_Dollar_Bk_B[i]
rf_Dollar_A_Bk <- solutions$r_f_Dollar_A_Bk[i]
rf_Yen_B_Bk <- solutions$r_f_Yen_B_Bk[i]
par(mar = c(0, 0, 0, 0))
plotDiagram(rfDollar_X, rfDollar_Y, rfYen_X, rfYen_Y, G_X, G_Y, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank)
}
reticulate::repl_python()
plotDiagram <- function(rfDollar_A, rfDollar_B, rfYen_A, rfYen_B, G_B, G_A, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank) {
# Set up an empty plot with vertical limits exactly covering the diagram.
plot(NA, NA,
xlim = c(-4, 14), ylim = c(0, 0),
type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
# Define node positions and dimensions.
# Company X: centered at (0, 0)
X.center <- c(0, 0)
X.left <- -1; X.right <- 1; X.top <- 0.5; X.bot <- -0.5
# Bank: shifted further to the right
Bank.center <- c(4.5, 0)
Bank.left <- 3.5; Bank.right <- 5.5; Bank.top <- 0.5; Bank.bot <- -0.5
# Company Y: shifted further to the right
Y.center <- c(9, 0)
Y.left <- 8; Y.right <- 10; Y.top <- 0.5; Y.bot <- -0.5
# Draw nodes as rectangles with text inside.
rect(X.left, X.bot, X.right, X.top, col = "lightblue")
text(X.center[1], X.center[2], paste("Company ", Company_X, "\n", G_A, sep = ""), cex = 0.6)
rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(Y.left, Y.bot, Y.right, Y.top, col = "lightblue")
text(Y.center[1], Y.center[2], paste("Company ", Company_Y, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(X.left, 0.2, X.right - 5, 0.2, rfDollar_A, label_offset = 0.25, side = "above")
add_arrow(X.right - 5, -0.2, X.left, -0.2, rfYen_A, label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, X.right, 0.2, rf_Dollar_A_Bk, label_offset = 0.25, side = "above")
add_arrow(Y.left, 0.2, Bank.right, 0.2, rf_Dollar_Bk_B, label_offset = 0.25, side = "above")
add_arrow(X.right, -0.2, Bank.left, -0.2, rfYen_Bk_A, label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, Y.left, -0.2, rf_Yen_B_Bk, label_offset = 0.25, side = "below")
add_arrow(Y.right + 2, 0.2, Y.right, 0.2, rfDollar_B, label_offset = 0.25, side = "above")
add_arrow(Y.right, -0.2, Y.right + 2, -0.2, rfYen_B, label_offset = 0.25, side = "below")
}
solutions <- read.csv("solutions.csv")
rfDollar_X <- "9.6%"
rfDollar_Y <- "10%"
rfYen_X <- "5%"
rfYen_Y <- "6.5%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.5%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
for (i in 1:5) {
rfYen_Bk_A <- solutions$r_f_Yen_Bk_A[i]
rf_Dollar_Bk_B <- solutions$r_f_Dollar_Bk_B[i]
rf_Dollar_A_Bk <- solutions$r_f_Dollar_A_Bk[i]
rf_Yen_B_Bk <- solutions$r_f_Yen_B_Bk[i]
par(mar = c(0, 0, 0, 0))
plotDiagram(rfDollar_X, rfDollar_Y, rfYen_X, rfYen_Y, G_X, G_Y, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank)
}
solutions <- read.csv("solutions.csv")
rfDollar_X <- "9.6%"
rfDollar_Y <- "10%"
rfYen_X <- "5%"
rfYen_Y <- "6.5%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.5%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
for (i in 1:5) {
rfYen_Bk_A <- paste(solutions$r_f_Yen_Bk_A[i], "%", sep="")
rf_Dollar_Bk_B <- paste(solutions$r_f_Dollar_Bk_B[i], "%", sep="")
rf_Dollar_A_Bk <- paste(solutions$r_f_Dollar_A_Bk[i], "%", sep="")
rf_Yen_B_Bk <- paste(solutions$r_f_Yen_B_Bk[i], "%", sep="")
par(mar = c(0, 0, 0, 0))
plotDiagram(rfDollar_X, rfDollar_Y, rfYen_X, rfYen_Y, G_X, G_Y, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank)
}
plotDiagram <- function(rfDollar_A, rfDollar_B, rfYen_A, rfYen_B, G_B, G_A, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank, currency1, currency2) {
# Set up an empty plot with vertical limits exactly covering the diagram.
plot(NA, NA,
xlim = c(-4, 14), ylim = c(0, 0),
type = "n", axes = FALSE, xlab = "", ylab = "", asp = 1)
# Define node positions and dimensions.
# Company X: centered at (0, 0)
X.center <- c(0, 0)
X.left <- -1; X.right <- 1; X.top <- 0.5; X.bot <- -0.5
# Bank: shifted further to the right
Bank.center <- c(4.5, 0)
Bank.left <- 3.5; Bank.right <- 5.5; Bank.top <- 0.5; Bank.bot <- -0.5
# Company Y: shifted further to the right
Y.center <- c(9, 0)
Y.left <- 8; Y.right <- 10; Y.top <- 0.5; Y.bot <- -0.5
# Draw nodes as rectangles with text inside.
rect(X.left, X.bot, X.right, X.top, col = "lightblue")
text(X.center[1], X.center[2], paste("Company ", Company_X, "\n", G_A, sep = ""), cex = 0.6)
rect(Bank.left, Bank.bot, Bank.right, Bank.top, col = "lightblue")
text(Bank.center[1], Bank.center[2], paste("Company ", Bank, "\n", G_bank, sep = ""), cex = 0.6)
rect(Y.left, Y.bot, Y.right, Y.top, col = "lightblue")
text(Y.center[1], Y.center[2], paste("Company ", Company_Y, "\n", G_B, sep = ""), cex = 0.6)
# Helper function to add an arrow with
add_arrow <- function(x0, y0, x1, y1, label, label_offset = 0.1, side = "above") {
arrows(x0, y0, x1, y1, code = 2, length = 0.1, lwd = 2)
xm <- (x0 + x1) / 2
ym <- (y0 + y1) / 2
if (side == "above") {
text(xm, ym + label_offset, label, cex = 0.6)
} else {
text(xm, ym - label_offset, label, cex = 0.6)
}
}
# Draw arrows using positions computed to mimic the desired offsets.
add_arrow(X.left, 0.2, X.right - 5, 0.2, paste(currency1, rfDollar_A, sep=" : "), label_offset = 0.25, side = "above")
add_arrow(X.right - 5, -0.2, X.left, -0.2, paste(currency2, rfYen_A, sep=" : "), label_offset = 0.25, side = "below")
add_arrow(Bank.left, 0.2, X.right, 0.2, rf_Dollar_A_Bk, label_offset = 0.25, side = "above")
add_arrow(Y.left, 0.2, Bank.right, 0.2, rf_Dollar_Bk_B, label_offset = 0.25, side = "above")
add_arrow(X.right, -0.2, Bank.left, -0.2, rfYen_Bk_A, label_offset = 0.25, side = "below")
add_arrow(Bank.right, -0.2, Y.left, -0.2, rf_Yen_B_Bk, label_offset = 0.25, side = "below")
add_arrow(Y.right + 2, 0.2, Y.right, 0.2, rfDollar_B, label_offset = 0.25, side = "above")
add_arrow(Y.right, -0.2, Y.right + 2, -0.2, rfYen_B, label_offset = 0.25, side = "below")
}
solutions <- read.csv("solutions.csv")
rfDollar_X <- "9.6%"
rfDollar_Y <- "10%"
rfYen_X <- "5%"
rfYen_Y <- "6.5%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.5%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
currency1 <- "Dollar"
currency2 <- "Yen"
for (i in 1:5) {
rfYen_Bk_A <- paste(solutions$r_f_Yen_Bk_A[i], "%", sep="")
rf_Dollar_Bk_B <- paste(solutions$r_f_Dollar_Bk_B[i], "%", sep="")
rf_Dollar_A_Bk <- paste(solutions$r_f_Dollar_A_Bk[i], "%", sep="")
rf_Yen_B_Bk <- paste(solutions$r_f_Yen_B_Bk[i], "%", sep="")
par(mar = c(0, 0, 0, 0))
plotDiagram(rfDollar_X, rfDollar_Y, rfYen_X, rfYen_Y, G_X, G_Y, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank, currency1, currency2)
}
reticulate::repl_python()
solutions <- read.csv("solutions.csv")
rfDollar_X <- "9.6%"
rfDollar_Y <- "10%"
rfYen_X <- "5%"
rfYen_Y <- "6.5%"
G_X <- "0.3%"
G_Y <- "0.3%"
G_bank <- "0.5%"
Company_X <- "X"
Company_Y <- "Y"
Bank <- "Bank"
currency1 <- "Dollar"
currency2 <- "Yen"
for (i in 1:5) {
rfYen_Bk_A <- paste(solutions$r_f_Yen_Bk_A[i], "%", sep="")
rf_Dollar_Bk_B <- paste(solutions$r_f_Dollar_Bk_B[i], "%", sep="")
rf_Dollar_A_Bk <- paste(solutions$r_f_Dollar_A_Bk[i], "%", sep="")
rf_Yen_B_Bk <- paste(solutions$r_f_Yen_B_Bk[i], "%", sep="")
par(mar = c(0, 0, 0, 0))
plotDiagram(rfDollar_X, rfDollar_Y, rfYen_X, rfYen_Y, G_X, G_Y, G_bank, rfYen_Bk_A, rf_Dollar_Bk_B, rf_Dollar_A_Bk, rf_Yen_B_Bk, Company_X, Company_Y, Bank, currency1, currency2)
}
View(solutions)
reticulate::repl_python()
